import requests
import os
import json

class OpenRouterClient:
    """Client for interacting with the OpenRouter API."""

    def __init__(self, verbose=False):
        """Initialize the OpenRouter client with the API key."""
        self.api_key = os.getenv('OPENROUTER_API_KEY')
        self.base_url = "https://openrouter.ai/api/v1/chat/completions"
        self.verbose = verbose

    def stream_completion(self, messages, model, temperature=0.7, max_tokens=2048, **kwargs):
        """Stream completion from the OpenRouter API.

        Args:
            messages (list): List of messages.
            model (str): Model for completion.
            temperature (float): Temperature for sampling.
            max_tokens (int): Maximum number of tokens to generate.
            **kwargs: Additional keyword arguments.

        Yields:
            str: Text generated by the OpenRouter API.
        """
        payload = {
            "model": model,
            "messages": messages,
            "temperature": temperature,
            "max_tokens": max_tokens,
            **kwargs
        }
        headers = {
            "accept": "application/json",
            "content-type": "application/json",
            "Authorization": f"Bearer {self.api_key}",
            "HTTP-Referer": "https://your-site-url.com",  # Optional, for including your app on openrouter.ai rankings.
            "X-Title": "Your App Name",  # Optional. Shows in rankings on openrouter.ai.
        }

        try:
            response = requests.post(self.base_url, json=payload, headers=headers, stream=False)
            response.raise_for_status()
            data = response.json()
            message_content = data['choices'][0]['message']['content']
            yield message_content
        except Exception as e:
            if self.verbose:
                import traceback
                traceback.print_exc()
            else:
                print(f"An error occurred streaming completion from OpenRouter API: {e}")
            raise RuntimeError(f"An error occurred streaming completion from OpenRouter API: {e}")

# Test the OpenRouterClient
if __name__ == "__main__":
    client = OpenRouterClient(verbose=True)
    messages = [
        {
            "role": "user",
            "content": "What is the meaning of life?"
        }
    ]
    model = "openai/gpt-3.5-turbo"

    print("Response:")
    for chunk in client.stream_completion(messages, model):
        print(chunk)